https://www.apachefriends.org/index.html
XAMPP install

& "C:\xampp\mysql\bin\mysql.exe" -u root -p --port=4000


CREATE DATABASE inquiries;
CREATE TABLE coursesinquiries (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) NOT NULL,
  phone VARCHAR(20) NOT NULL,
  course_title VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
USE inquiries;
SHOW TABLES;
DESCRIBE coursesinquiries;
SELECT * FROM coursesinquiries;	
mail
erxi ffsx hliw ruvo








C:\Users\malat\Desktop\project-bolt-sb1-x4srrmj7\project\components\CourseCard.tsx
import { useState } from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { Clock, Users } from "lucide-react";
import { Badge } from "@/components/ui/badge";

interface CourseCardProps {
  course: {
    id: string;
    title: string;
    description: string;
    image: string;
    price: number;
    discountPrice?: number;
    duration: string;
    level: string;
    category: string;
    rating: number;
    reviewCount: number;
    students: number;
    instructor: {
      name: string;
    };
  };
  featured?: boolean;
}

export default function CourseCard({ course, featured = false }: CourseCardProps) {
  const router = useRouter();
  const [isHovered, setIsHovered] = useState(false);
  
  return (
    <div 
      className={`bg-white rounded-xl shadow-sm overflow-hidden hover:shadow-md transition-all duration-300 ${
        isHovered ? "transform translate-y-[-4px]" : ""
      }`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      onClick={() => router.push(`/courses/${course.id}`)}
    >
      <div className="relative h-52 w-full">
        <Image 
          src={course.image}
          alt={course.title}
          fill
          style={{ objectFit: "cover" }}
        />
        <div className="absolute top-2 right-2">
          <Badge variant="secondary" className="bg-white/80 text-gray-700 backdrop-blur-sm">
            {course.category}
          </Badge>
        </div>
      </div>
      
      <div className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-2 line-clamp-2 min-h-[3.5rem]">
          {course.title}
        </h3>
        
        <p className="text-gray-600 mb-4 line-clamp-2 min-h-[3rem]">
          {course.description}
        </p>
        
        <div className="flex flex-wrap gap-4 mb-4 text-sm text-gray-500">
          <div className="flex items-center">
            <Clock className="h-4 w-4 text-sky-500 mr-1" />
            <span>{course.duration}</span>
          </div>
          <div className="flex items-center">
            <Users className="h-4 w-4 text-sky-500 mr-1" />
            <span>{course.students}+ students</span>
          </div>
        </div>
        
        <div className="flex items-center mb-4">
          <div className="flex">
            {[...Array(5)].map((_, i) => (
              <svg 
                key={i} 
                className={`w-4 h-4 ${i < Math.floor(course.rating) ? 'text-yellow-400' : 'text-gray-300'}`} 
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
            ))}
            <span className="ml-1 text-sm text-gray-600">({course.reviewCount})</span>
          </div>
          
          <div className="flex-grow"></div>
          
          <div className="flex items-center gap-2">
            {course.discountPrice && (
              <span className="text-sm line-through text-gray-500">${course.discountPrice}</span>
            )}
            <span className="font-semibold text-gray-900">${course.price}</span>
          </div>
        </div>
        
        <div className="pt-4 border-t border-gray-100 flex items-center text-sm">
          <span className="text-gray-600">Instructor: </span>
          <span className="ml-1 font-medium text-gray-900">{course.instructor.name}</span>
        </div>
        <div className="mt-4">
          <button
            onClick={(e) => {
              e.stopPropagation(); // Prevent full card click
              //router.push(`/courses/${course.id}`);
              router.push(`/courseinquiry?title=${encodeURIComponent(course.title)}`);
            }}
            className="text-sky-500 hover:text-sky-600 text-sm font-medium inline-flex items-center"
          >
            inquiry
            <svg
              className="h-4 w-4 ml-1"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path strokeLinecap="round" strokeLinejoin="round" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
}

################################################################################################################################################################
C:\Users\malat\Desktop\project-bolt-sb1-x4srrmj7\project\lib\db.ts
// lib/db.ts

import mysql from 'mysql2/promise';

const db = mysql.createPool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});

console.log("db ##################");

export default db;
################################################################################################################################################################
C:\Users\malat\Desktop\project-bolt-sb1-x4srrmj7\project\app\courseinquiry\page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';

export default function CourseInquiryForm() {
  // const router = useRouter();
  const searchParams = useSearchParams();
  const courseTitle = searchParams.get('title') || '';

  const [form, setForm] = useState({
    name: '',
    email: '',
    phone: '',
    course: '',
  });

  const [status, setStatus] = useState('');

  useEffect(() => {
    setForm((prev) => ({ ...prev, course: courseTitle }));
  }, [courseTitle]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus('Submitting...');
  
    try {
      const res = await fetch('/api/courseinquiry', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form),
      });
      console.log("try completed @@@@@@@@@@@@");
  
      const data = await res.json();
      console.log(data);  // log response data to check for errors or success
      if (res.ok) {
        setStatus('Inquiry submitted successfully!');
        setForm({ name: '', email: '', phone: '', course: courseTitle });
      } else {
        setStatus(`Error: ${data.message}`);
      }
    } catch (err) {
      console.error(err);  // log the error to the console for more information
      setStatus('Failed to submit inquiry.');
    }
  };
  

  return (
    <div className="max-w-xl mx-auto p-6 bg-white rounded-xl shadow-md mt-10">
      <h2 className="text-2xl font-bold mb-4">Course Inquiry</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">Course</label>
          <input
            type="text"
            name="course"
            value={form.course}
            readOnly
            className="mt-1 block w-full border-gray-300 rounded-md shadow-sm bg-gray-100 text-gray-700"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700">Name</label>
          <input
            type="text"
            name="name"
            value={form.name}
            onChange={handleChange}
            required
            className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700">Email</label>
          <input
            type="email"
            name="email"
            value={form.email}
            onChange={handleChange}
            required
            className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700">Phone</label>
          <input
            type="tel"
            name="phone"
            value={form.phone}
            onChange={handleChange}
            required
            className="mt-1 block w-full border-gray-300 rounded-md shadow-sm"
          />
        </div>

        <button
          type="submit"
          className="w-full bg-sky-600 hover:bg-sky-700 text-white py-2 px-4 rounded-md"
        >
          Submit Inquiry
        </button>
      </form>

      {status && <p className="mt-4 text-sm text-gray-700">{status}</p>}
    </div>
  );
}
################################################################################################################################################################
C:\Users\malat\Desktop\project-bolt-sb1-x4srrmj7\project\pages\api\courseinquiry.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import db from '@/lib/db';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    console.log("API hit !!!!!!!!!!!!!!!!!!!!!");
    res.setHeader('Access-Control-Allow-Origin', '*'); // or specify your frontend domain
    res.setHeader('Access-Control-Allow-Methods', 'POST, GET, OPTIONS'); // Add allowed methods
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
    if (req.method !== 'POST') return res.status(405).json({ message: 'Method not allowed' });
  
    const { name, email, phone, course } = req.body;
  
    if (!name || !email || !phone || !course) {
      return res.status(400).json({ message: 'Missing required fields' });
    }
  
    try {
      await db.execute(
        'INSERT INTO coursesinquiries (name, email, phone, course_title) VALUES (?, ?, ?, ?)',
        [name, email, phone, course]
      );
      res.status(200).json({ message: 'Inquiry submitted successfully' });
    } catch (err) {
      console.error('DB Error:', err);
      res.status(500).json({ message: 'Database error' });
    }
  }  
################################################################################################################################################################
